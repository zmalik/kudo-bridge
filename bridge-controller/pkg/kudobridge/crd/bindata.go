// Code generated for package crd by go-bindata DO NOT EDIT. (@generated)
// sources:
// config/crds/kudobridge.dev_bridgeinstances.yaml
package crd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configCrdsKudobridgeDev_bridgeinstancesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xdb\x46\x13\xbe\xeb\x57\x0c\x9c\x83\xdf\x00\x16\xf5\xda\x05\x8a\x42\xb7\xd4\x6e\x0b\x37\xad\x6d\x44\x4e\x2e\x41\x0e\xab\xdd\x11\x39\x35\xb9\xcb\xee\xce\x4a\x56\x8b\xfe\xf7\x62\x76\x49\x7d\x99\x6a\xec\x02\x49\x75\x49\x38\x3b\x9c\x8f\x67\x9e\x99\x1d\x7a\x34\x1e\x8f\x47\xaa\xa5\x0f\xe8\x03\x39\x3b\x05\xd5\x12\x3e\x32\x5a\x79\x0a\xc5\xc3\x77\xa1\x20\x37\x59\x9e\xcf\x91\xd5\xf9\xe8\x81\xac\x99\xc2\x65\x0c\xec\x9a\x77\x18\x5c\xf4\x1a\xaf\x70\x41\x96\x98\x9c\x1d\x35\xc8\xca\x28\x56\xd3\x11\x80\xb2\xd6\xb1\x12\x71\x90\x47\x00\xed\x2c\x7b\x57\xd7\xe8\xc7\x25\xda\xe2\x21\xce\x71\x1e\xa9\x36\xe8\x93\x87\xde\xff\xf2\xff\xc5\x45\xf1\xed\x08\x40\x7b\x4c\xaf\xdf\x53\x83\x81\x55\xd3\x4e\xc1\xc6\xba\x1e\x01\x58\xd5\xe0\x14\xe6\x9e\x4c\x89\x64\x03\x2b\xab\x31\x14\x0f\xd1\xb8\x2c\x2b\x0c\x2e\x47\xa1\x45\x2d\x8e\x4b\xef\x62\x3b\x85\x83\xd3\x6c\xa4\x8b\x2c\x67\xf5\x7d\x3a\xbd\xee\xec\xa5\x83\x9a\x02\xbf\x1d\x38\xfc\x85\x02\x27\x85\xb6\x8e\x5e\xd5\x4f\x62\x49\x67\x81\x6c\x19\x6b\xe5\x0f\x4f\x47\x00\x41\xbb\x16\xa7\x70\x23\x21\xb4\x4a\xa3\x19\x01\x2c\x55\x4d\x26\x25\x9c\x83\x72\x2d\xda\x37\x77\xd7\x1f\xbe\x99\xe9\x0a\x1b\x95\x85\x00\x06\x83\xf6\xd4\x26\x3d\xe8\xe3\x01\x0a\xc0\x15\x42\x56\x85\x85\xf3\xe9\x71\x13\x0f\xbc\xb9\xbb\x2e\x3a\x03\xad\x77\x2d\x7a\xa6\x3e\x79\xf9\xed\xd4\x7f\x23\x3b\x70\x75\x2a\xb1\x64\x1d\x30\x52\x71\xcc\x2e\xbb\xba\xa1\x81\x90\x9d\xbb\x05\x70\x45\x01\x3c\xb6\x1e\x03\xda\xcc\x81\x1d\xb3\x20\x2a\xca\x82\x9b\xff\x86\x9a\x0b\x98\xa1\x17\x23\x10\x2a\x17\x6b\x23\x34\x59\xa2\x67\xf0\xa8\x5d\x69\xe9\x8f\x8d\xe5\x00\xec\x92\xcb\x5a\x31\x76\xf8\xf7\x3f\xb2\x8c\xde\xaa\x5a\x50\x8c\x78\x06\xca\x1a\x68\xd4\x1a\x3c\x8a\x0f\x88\x76\xc7\x5a\x52\x09\x05\xfc\xea\xbc\x40\xb4\x70\x53\xa8\x98\xdb\x30\x9d\x4c\x4a\xe2\x9e\xf1\xda\x35\x4d\xb4\xc4\xeb\x49\xe2\x2d\xcd\x23\x3b\x1f\x26\x06\x97\x58\x4f\x02\x95\x63\xe5\x75\x45\x8c\x9a\xa3\xc7\x89\x6a\x69\x9c\x02\xb7\x89\xf0\x45\x63\x5e\xf9\xae\x3d\xc2\xe9\x4e\xa4\xbc\x96\xba\x07\xf6\x64\xcb\x8d\x38\xd1\xef\x28\xee\xc2\x3f\xa9\xaf\xea\x5e\xcb\xf1\x6f\xe1\x15\x91\xa0\xf2\xee\x87\xd9\x3d\xf4\x4e\x53\x09\xf6\x31\x4f\x68\x6f\x5f\x0b\x5b\xe0\x05\x28\xb2\x0b\xf4\xb9\x70\x0b\xef\x9a\x64\x11\xad\x69\x1d\x59\x4e\x0f\xba\x26\xb4\xfb\xa0\x87\x38\x6f\x88\xa5\xd2\xbf\x47\x0c\x2c\xf5\x29\xe0\x32\xf5\x3d\xcc\x11\x62\x6b\x14\xa3\x29\xe0\xda\xc2\xa5\x6a\xb0\xbe\x54\x01\xbf\x38\xec\x82\x70\x18\x0b\xa4\x9f\x07\x7e\x77\x5c\xed\x2b\x66\xb4\x36\xe2\x7e\x96\x0c\x56\x68\x7f\x34\xcc\x5a\xd4\x7b\x0d\x62\x30\x90\x17\x12\xb3\x62\x14\xea\xf7\x9a\xc5\x8e\xc1\xa1\xa6\x4c\x33\xd3\x9b\xd9\x81\xef\xa3\x41\x42\x1e\x1a\x5e\xb1\xf3\x03\xdd\xfc\x24\xee\xdb\x7d\xdd\x94\x24\x2d\x08\x85\x6a\x1e\x17\xe8\x51\x26\x0b\x3b\x61\x5e\x3e\xd2\xf0\xf6\xfd\xd5\xed\x81\x4d\x78\x62\xa8\x6b\xec\x03\xbd\x63\x29\xc2\xd1\xf9\x33\x18\xf5\x9b\xbb\xeb\x7e\xe6\xe4\x51\x83\x7d\xb0\x4f\x3c\xc2\xb1\xba\xf7\xbf\x05\x61\x6d\xee\x14\x57\x9f\xf5\x7a\x7a\xbd\xc8\x6e\x52\x07\x26\x4c\x5a\x42\x8d\x7b\xa3\x2c\xcd\x5b\x54\x26\x0b\x07\x4c\x02\x08\x51\x3d\x76\xfa\x67\xb9\xdf\xba\xb6\xde\x8e\x3f\x56\x64\x41\xe5\x0b\x01\x7e\x9e\xdd\xde\x4c\x7e\x72\x39\xd6\x41\x9b\x4a\x6b\x0c\x21\xf3\xab\x41\xcb\x67\x10\xa2\xae\x40\x85\x9e\x7a\x33\x39\x29\x1a\x65\x69\x81\x81\x8b\xce\x03\xfa\xf0\xf1\xe2\xd3\x10\x66\x00\x3f\x3a\x0f\xf8\xa8\x9a\xb6\xc6\x33\xa0\x8c\xf2\x66\x80\xf4\xcc\xa0\x90\x81\xd8\xd8\x83\x15\x71\x45\xc3\x89\x2b\x68\x9d\xe9\x12\x5e\xa5\x44\x59\x3d\x20\xb8\x2e\xd1\x88\x50\xd3\x03\x4e\xe1\x44\xa8\xb6\x13\xe2\x9f\x72\x4d\xff\x75\x32\x68\xf3\x7f\xab\x0a\x3d\xc2\x89\xa8\x9c\xe4\xc0\x36\x77\x84\xc8\x7a\x7e\x6c\x03\xe4\x4a\x31\xb0\xa7\xb2\x44\x8f\xc3\x68\xa6\xc1\x27\x03\xe5\x35\x38\x2f\xb9\x5b\xb7\x63\x20\x99\x95\x9a\x75\xbd\x62\x9e\x04\xfc\xf1\xe2\xd3\x91\x68\xf7\x71\x02\xb2\x06\x1f\xe1\x02\xc8\x66\x54\x5a\x67\x5e\x17\x70\x9f\x18\xb1\xb6\xac\x1e\xc5\x8f\xae\x5c\x40\x0b\xce\xd6\xeb\xe1\x68\x1d\x54\x6a\x89\x10\x5c\x83\xb0\xc2\xba\x1e\xe7\xd1\x63\x60\xa5\xd6\x92\x7f\x5f\x2e\x61\x98\x82\x56\x79\xde\xbf\x7d\x07\xad\xde\xdf\x5e\xdd\x4e\x73\x54\x42\xa1\xd2\x4a\x28\x32\xd5\x17\x24\x77\xac\x5c\xae\xf9\xa6\x10\x4e\x26\x38\x62\x26\x07\x3b\xd0\x95\xb2\x25\x0e\x9a\x4d\x99\x22\x2c\xa2\xcc\xee\xe2\xf4\xa5\xdd\x7a\x78\x4d\xf6\xbf\x81\xeb\xf2\x70\x30\xfc\x47\x97\xce\xb3\xd2\x4a\xcb\xec\x67\xd3\xba\xd9\xe1\xf3\x3f\xa6\x25\x6b\xb5\xb7\xc8\x98\x32\x33\x4e\x07\x49\x4a\x63\xcb\x61\xe2\x96\xe8\x97\x84\xab\xc9\xca\xf9\x07\xb2\xe5\x58\x88\x38\xce\x4c\x08\x93\xb4\x10\x4f\x5e\xa5\x7f\xfe\x55\x16\x69\x95\x7d\x5e\x2a\x49\xf5\x6b\xe4\x23\x7e\xc2\xe4\xc5\xe9\xf4\x7b\xd4\x73\x6f\xa5\xd3\x59\x7f\x43\x1e\xbc\x29\x2d\xb1\xaa\x48\x57\xfd\x52\xbc\x9d\x9e\x83\x3d\xd2\x28\x93\x47\xae\xb2\xeb\x2f\x4e\x5b\x01\x32\x7a\x89\x67\x3d\xee\xbe\xce\xc6\xca\x1a\xf9\x7f\xa0\xc0\x22\x7f\x31\x72\x91\x9e\xd1\xa4\xef\xaf\xaf\xbe\x0e\x99\x23\xbd\xb8\x23\x8f\xec\x56\xc3\x7b\x21\x2b\x8e\xe1\xb9\x9b\x61\x52\xde\xdb\x0d\xdd\x3c\xc8\x0e\x3e\xb0\x1c\x3e\x63\x37\x9c\x0f\x58\x1f\x5e\x14\x9f\xe4\x39\x90\xcc\x81\x68\xfb\x39\x7e\xae\xea\xb6\x52\xe7\x5b\x59\x72\x32\xee\x3e\xc2\x77\x8e\x01\x72\x32\x53\x60\x1f\x73\x02\x81\x9d\x57\x25\x76\x92\x2d\x5a\xb2\xb2\xb4\x8c\xe6\xe6\xf0\x1b\xfc\xe4\x64\xef\xb3\x3a\x3d\x6a\x67\x0d\xe5\xbf\x23\xc0\xc7\x4f\xa3\x6c\x15\xcd\x87\x3e\x1a\x11\xfe\x1d\x00\x00\xff\xff\xfb\x12\xb8\x83\xc6\x10\x00\x00")

func configCrdsKudobridgeDev_bridgeinstancesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdsKudobridgeDev_bridgeinstancesYaml,
		"config/crds/kudobridge.dev_bridgeinstances.yaml",
	)
}

func configCrdsKudobridgeDev_bridgeinstancesYaml() (*asset, error) {
	bytes, err := configCrdsKudobridgeDev_bridgeinstancesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/kudobridge.dev_bridgeinstances.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/crds/kudobridge.dev_bridgeinstances.yaml": configCrdsKudobridgeDev_bridgeinstancesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"crds": &bintree{nil, map[string]*bintree{
			"kudobridge.dev_bridgeinstances.yaml": &bintree{configCrdsKudobridgeDev_bridgeinstancesYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
