/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/zmalik/kudo-bridge/bridge-controller/pkg/apis/kudobridge/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BridgeInstanceLister helps list BridgeInstances.
type BridgeInstanceLister interface {
	// List lists all BridgeInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BridgeInstance, err error)
	// BridgeInstances returns an object that can list and get BridgeInstances.
	BridgeInstances(namespace string) BridgeInstanceNamespaceLister
	BridgeInstanceListerExpansion
}

// bridgeInstanceLister implements the BridgeInstanceLister interface.
type bridgeInstanceLister struct {
	indexer cache.Indexer
}

// NewBridgeInstanceLister returns a new BridgeInstanceLister.
func NewBridgeInstanceLister(indexer cache.Indexer) BridgeInstanceLister {
	return &bridgeInstanceLister{indexer: indexer}
}

// List lists all BridgeInstances in the indexer.
func (s *bridgeInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.BridgeInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BridgeInstance))
	})
	return ret, err
}

// BridgeInstances returns an object that can list and get BridgeInstances.
func (s *bridgeInstanceLister) BridgeInstances(namespace string) BridgeInstanceNamespaceLister {
	return bridgeInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BridgeInstanceNamespaceLister helps list and get BridgeInstances.
type BridgeInstanceNamespaceLister interface {
	// List lists all BridgeInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BridgeInstance, err error)
	// Get retrieves the BridgeInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BridgeInstance, error)
	BridgeInstanceNamespaceListerExpansion
}

// bridgeInstanceNamespaceLister implements the BridgeInstanceNamespaceLister
// interface.
type bridgeInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BridgeInstances in the indexer for a given namespace.
func (s bridgeInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BridgeInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BridgeInstance))
	})
	return ret, err
}

// Get retrieves the BridgeInstance from the indexer for a given namespace and name.
func (s bridgeInstanceNamespaceLister) Get(name string) (*v1alpha1.BridgeInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bridgeinstance"), name)
	}
	return obj.(*v1alpha1.BridgeInstance), nil
}
